"""
This type stub file was generated by pyright.
"""

from django.test import testcases
from django.test.client import Client as DjangoClient, ClientHandler, RequestFactory as DjangoRequestFactory
from rest_framework.compat import coreapi, requests
from typing import Any, Optional

def force_authenticate(request, user: Optional[Any] = ..., token: Optional[Any] = ...):
    ...

if requests is not None:
    class HeaderDict(requests.packages.urllib3._collections.HTTPHeaderDict):
        def get_all(self, key, default):
            ...
        
    
    
    class MockOriginalResponse:
        def __init__(self, headers):
            self.msg = ...
            self.closed = ...
        
        def isclosed(self):
            ...
        
        def close(self):
            self.closed = ...
        
    
    
    class DjangoTestAdapter(requests.adapters.HTTPAdapter):
        """
        A transport adapter for `requests`, that makes requests via the
        Django WSGI app, rather than making actual HTTP requests over the network.
        """
        def __init__(self):
            self.app = ...
            self.factory = ...
        
        def get_environ(self, request):
            """
            Given a `requests.PreparedRequest` instance, return a WSGI environ dict.
            """
            ...
        
        def send(self, request, *args, **kwargs):
            """
            Make an outgoing request to the Django WSGI application.
            """
            ...
        
        def close(self):
            ...
        
    
    
    class RequestsClient(requests.Session):
        def __init__(self, *args, **kwargs):
            ...
        
        def request(self, method, url, *args, **kwargs):
            ...
        
    
    
else:
    def RequestsClient(*args, **kwargs):
        ...
    
if coreapi is not None:
    class CoreAPIClient(coreapi.Client):
        def __init__(self, *args, **kwargs):
            ...
        
        @property
        def session(self):
            ...
        
    
    
else:
    def CoreAPIClient(*args, **kwargs):
        ...
    
class APIRequestFactory(DjangoRequestFactory):
    renderer_classes_list = ...
    default_format = ...
    def __init__(self, enforce_csrf_checks: bool = ..., **defaults):
        self.enforce_csrf_checks = ...
        self.renderer_classes = ...
    
    def _encode_data(self, data, format: Optional[Any] = ..., content_type: Optional[Any] = ...):
        """
        Encode the data returning a two tuple of (bytes, content_type)
        """
        ...
    
    def get(self, path, data: Optional[Any] = ..., **extra):
        ...
    
    def post(self, path, data: Optional[Any] = ..., format: Optional[Any] = ..., content_type: Optional[Any] = ..., **extra):
        ...
    
    def put(self, path, data: Optional[Any] = ..., format: Optional[Any] = ..., content_type: Optional[Any] = ..., **extra):
        ...
    
    def patch(self, path, data: Optional[Any] = ..., format: Optional[Any] = ..., content_type: Optional[Any] = ..., **extra):
        ...
    
    def delete(self, path, data: Optional[Any] = ..., format: Optional[Any] = ..., content_type: Optional[Any] = ..., **extra):
        ...
    
    def options(self, path, data: Optional[Any] = ..., format: Optional[Any] = ..., content_type: Optional[Any] = ..., **extra):
        ...
    
    def generic(self, method, path, data=..., content_type=..., secure: bool = ..., **extra):
        ...
    
    def request(self, **kwargs):
        ...
    


class ForceAuthClientHandler(ClientHandler):
    """
    A patched version of ClientHandler that can enforce authentication
    on the outgoing requests.
    """
    def __init__(self, *args, **kwargs):
        ...
    
    def get_response(self, request):
        ...
    


class APIClient(APIRequestFactory, DjangoClient):
    def __init__(self, enforce_csrf_checks: bool = ..., **defaults):
        self.handler = ...
    
    def credentials(self, **kwargs):
        """
        Sets headers that will be used on every outgoing request.
        """
        ...
    
    def force_authenticate(self, user: Optional[Any] = ..., token: Optional[Any] = ...):
        """
        Forcibly authenticates outgoing requests with the given
        user and/or token.
        """
        ...
    
    def request(self, **kwargs):
        ...
    
    def get(self, path, data: Optional[Any] = ..., follow: bool = ..., **extra):
        ...
    
    def post(self, path, data: Optional[Any] = ..., format: Optional[Any] = ..., content_type: Optional[Any] = ..., follow: bool = ..., **extra):
        ...
    
    def put(self, path, data: Optional[Any] = ..., format: Optional[Any] = ..., content_type: Optional[Any] = ..., follow: bool = ..., **extra):
        ...
    
    def patch(self, path, data: Optional[Any] = ..., format: Optional[Any] = ..., content_type: Optional[Any] = ..., follow: bool = ..., **extra):
        ...
    
    def delete(self, path, data: Optional[Any] = ..., format: Optional[Any] = ..., content_type: Optional[Any] = ..., follow: bool = ..., **extra):
        ...
    
    def options(self, path, data: Optional[Any] = ..., format: Optional[Any] = ..., content_type: Optional[Any] = ..., follow: bool = ..., **extra):
        ...
    
    def logout(self):
        ...
    


class APITransactionTestCase(testcases.TransactionTestCase):
    client_class = ...


class APITestCase(testcases.TestCase):
    client_class = ...


class APISimpleTestCase(testcases.SimpleTestCase):
    client_class = ...


class APILiveServerTestCase(testcases.LiveServerTestCase):
    client_class = ...


class URLPatternsTestCase(testcases.SimpleTestCase):
    """
    Isolate URL patterns on a per-TestCase basis. For example,

    class ATestCase(URLPatternsTestCase):
        urlpatterns = [...]

        def test_something(self):
            ...

    class AnotherTestCase(URLPatternsTestCase):
        urlpatterns = [...]

        def test_something_else(self):
            ...
    """
    @classmethod
    def setUpClass(cls):
        ...
    
    @classmethod
    def tearDownClass(cls):
        ...
    


