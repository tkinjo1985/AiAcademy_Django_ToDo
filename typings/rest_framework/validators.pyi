"""
This type stub file was generated by pyright.
"""

from typing import Any, Optional

"""
We perform uniqueness checks explicitly on the serializer class, rather
the using Django's `.full_clean()`.

This gives us better separation of concerns, allows us to use single-step
object creation, and makes it possible to switch between using the implicit
`ModelSerializer` class and an equivalent explicit `Serializer` class.
"""
def qs_exists(queryset):
    ...

def qs_filter(queryset, **kwargs):
    ...

class UniqueValidator:
    """
    Validator that corresponds to `unique=True` on a model field.

    Should be applied to an individual field on the serializer.
    """
    message = ...
    requires_context = ...
    def __init__(self, queryset, message: Optional[Any] = ..., lookup=...):
        self.queryset = ...
        self.message = ...
        self.lookup = ...
    
    def filter_queryset(self, value, queryset, field_name):
        """
        Filter the queryset to all instances matching the given attribute.
        """
        ...
    
    def exclude_current_instance(self, queryset, instance):
        """
        If an instance is being updated, then do not include
        that instance itself as a uniqueness conflict.
        """
        ...
    
    def __call__(self, value, serializer_field):
        ...
    
    def __repr__(self):
        ...
    


class UniqueTogetherValidator:
    """
    Validator that corresponds to `unique_together = (...)` on a model class.

    Should be applied to the serializer class, not to an individual field.
    """
    message = ...
    missing_message = ...
    requires_context = ...
    def __init__(self, queryset, fields, message: Optional[Any] = ...):
        self.queryset = ...
        self.fields = ...
        self.message = ...
    
    def enforce_required_fields(self, attrs, serializer):
        """
        The `UniqueTogetherValidator` always forces an implied 'required'
        state on the fields it applies to.
        """
        ...
    
    def filter_queryset(self, attrs, queryset, serializer):
        """
        Filter the queryset to all instances matching the given attributes.
        """
        ...
    
    def exclude_current_instance(self, attrs, queryset, instance):
        """
        If an instance is being updated, then do not include
        that instance itself as a uniqueness conflict.
        """
        ...
    
    def __call__(self, attrs, serializer):
        ...
    
    def __repr__(self):
        ...
    


class BaseUniqueForValidator:
    message = ...
    missing_message = ...
    requires_context = ...
    def __init__(self, queryset, field, date_field, message: Optional[Any] = ...):
        self.queryset = ...
        self.field = ...
        self.date_field = ...
        self.message = ...
    
    def enforce_required_fields(self, attrs):
        """
        The `UniqueFor<Range>Validator` classes always force an implied
        'required' state on the fields they are applied to.
        """
        ...
    
    def filter_queryset(self, attrs, queryset, field_name, date_field_name):
        ...
    
    def exclude_current_instance(self, attrs, queryset, instance):
        """
        If an instance is being updated, then do not include
        that instance itself as a uniqueness conflict.
        """
        ...
    
    def __call__(self, attrs, serializer):
        ...
    
    def __repr__(self):
        ...
    


class UniqueForDateValidator(BaseUniqueForValidator):
    message = ...
    def filter_queryset(self, attrs, queryset, field_name, date_field_name):
        ...
    


class UniqueForMonthValidator(BaseUniqueForValidator):
    message = ...
    def filter_queryset(self, attrs, queryset, field_name, date_field_name):
        ...
    


class UniqueForYearValidator(BaseUniqueForValidator):
    message = ...
    def filter_queryset(self, attrs, queryset, field_name, date_field_name):
        ...
    


