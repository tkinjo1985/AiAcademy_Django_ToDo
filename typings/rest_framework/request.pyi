"""
This type stub file was generated by pyright.
"""

from contextlib import contextmanager
from typing import Any, Optional

"""
The Request class is used as a wrapper around the standard request object.

The wrapped request then offers a richer API, in particular :

    - content automatically parsed according to `Content-Type` header,
      and available as `request.data`
    - full support of PUT method, including support for file uploads
    - form overloading of HTTP method, content type and content
"""
def is_form_media_type(media_type):
    """
    Return True if the media type is a valid form media type.
    """
    ...

class override_method:
    """
    A context manager that temporarily overrides the method on a request,
    additionally setting the `view.request` attribute.

    Usage:

        with override_method(view, request, 'POST') as request:
            ... # Do stuff with `view` and `request`
    """
    def __init__(self, view, request, method):
        self.view = ...
        self.request = ...
        self.method = ...
        self.action = ...
    
    def __enter__(self):
        ...
    
    def __exit__(self, *args, **kwarg):
        ...
    


class WrappedAttributeError(Exception):
    ...


@contextmanager
def wrap_attributeerrors():
    """
    Used to re-raise AttributeErrors caught during authentication, preventing
    these errors from otherwise being handled by the attribute access protocol.
    """
    ...

class Empty:
    """
    Placeholder for unset attributes.
    Cannot use `None`, as that may be a valid value.
    """
    ...


def _hasattr(obj, name):
    ...

def clone_request(request, method):
    """
    Internal helper method to clone a request, replacing with a different
    HTTP method.  Used for checking permissions against other methods.
    """
    ...

class ForcedAuthentication:
    """
    This authentication class is used if the test client or request factory
    forcibly authenticated the request.
    """
    def __init__(self, force_user, force_token):
        self.force_user = ...
        self.force_token = ...
    
    def authenticate(self, request):
        ...
    


class Request:
    """
    Wrapper allowing to enhance a standard `HttpRequest` instance.

    Kwargs:
        - request(HttpRequest). The original request instance.
        - parsers_classes(list/tuple). The parsers to use for parsing the
          request content.
        - authentication_classes(list/tuple). The authentications used to try
          authenticating the request's user.
    """
    def __init__(self, request, parsers: Optional[Any] = ..., authenticators: Optional[Any] = ..., negotiator: Optional[Any] = ..., parser_context: Optional[Any] = ...):
        self.parsers = ...
        self.authenticators = ...
        self.negotiator = ...
        self.parser_context = ...
    
    def _default_negotiator(self):
        ...
    
    @property
    def content_type(self):
        ...
    
    @property
    def stream(self):
        """
        Returns an object that may be used to stream the request content.
        """
        ...
    
    @property
    def query_params(self):
        """
        More semantically correct name for request.GET.
        """
        ...
    
    @property
    def data(self):
        ...
    
    @property
    def user(self):
        """
        Returns the user associated with the current request, as authenticated
        by the authentication classes provided to the request.
        """
        ...
    
    @user.setter
    def user(self, value):
        """
        Sets the user on the current request. This is necessary to maintain
        compatibility with django.contrib.auth where the user property is
        set in the login and logout functions.

        Note that we also set the user on Django's underlying `HttpRequest`
        instance, ensuring that it is available to any middleware in the stack.
        """
        ...
    
    @property
    def auth(self):
        """
        Returns any non-user authentication information associated with the
        request, such as an authentication token.
        """
        ...
    
    @auth.setter
    def auth(self, value):
        """
        Sets any non-user authentication information associated with the
        request, such as an authentication token.
        """
        ...
    
    @property
    def successful_authenticator(self):
        """
        Return the instance of the authentication instance class that was used
        to authenticate the request, or `None`.
        """
        ...
    
    def _load_data_and_files(self):
        """
        Parses the request content into `self.data`.
        """
        ...
    
    def _load_stream(self):
        """
        Return the content body of the request, as a stream.
        """
        ...
    
    def _supports_form_parsing(self):
        """
        Return True if this requests supports parsing form data.
        """
        ...
    
    def _parse(self):
        """
        Parse the request content, returning a two-tuple of (data, files)

        May raise an `UnsupportedMediaType`, or `ParseError` exception.
        """
        ...
    
    def _authenticate(self):
        """
        Attempt to authenticate the request using each authentication instance
        in turn.
        """
        ...
    
    def _not_authenticated(self):
        """
        Set authenticator, user & authtoken representing an unauthenticated request.

        Defaults are None, AnonymousUser & None.
        """
        ...
    
    def __getattr__(self, attr):
        """
        If an attribute does not exist on this instance, then we also attempt
        to proxy it to the underlying HttpRequest object.
        """
        ...
    
    @property
    def DATA(self):
        ...
    
    @property
    def POST(self):
        ...
    
    @property
    def FILES(self):
        ...
    
    @property
    def QUERY_PARAMS(self):
        ...
    
    def force_plaintext_errors(self, value):
        ...
    


