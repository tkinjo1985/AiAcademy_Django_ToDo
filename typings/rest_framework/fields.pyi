"""
This type stub file was generated by pyright.
"""

import re
from typing import Any, Optional

class empty:
    """
    This class is used to represent no data being provided for a given input
    or output value.

    It is required because `None` may be a valid input or output value.
    """
    ...


class BuiltinSignatureError(Exception):
    """
    Built-in function signatures are not inspectable. This exception is raised
    so the serializer can raise a helpful error message.
    """
    ...


def is_simple_callable(obj):
    """
    True if the object is a callable that takes no arguments.
    """
    ...

def get_attribute(instance, attrs):
    """
    Similar to Python's built in `getattr(instance, attr)`,
    but takes a list of nested attributes, instead of a single attribute.

    Also accepts either attribute lookup on objects or dictionary lookups.
    """
    ...

def set_value(dictionary, keys, value):
    """
    Similar to Python's built in `dictionary[key] = value`,
    but takes a list of nested keys instead of a single key.

    set_value({'a': 1}, [], {'b': 2}) -> {'a': 1, 'b': 2}
    set_value({'a': 1}, ['x'], 2) -> {'a': 1, 'x': 2}
    set_value({'a': 1}, ['x', 'y'], 2) -> {'a': 1, 'x': {'y': 2}}
    """
    ...

def to_choices_dict(choices):
    """
    Convert choices into key/value dicts.

    to_choices_dict([1]) -> {1: 1}
    to_choices_dict([(1, '1st'), (2, '2nd')]) -> {1: '1st', 2: '2nd'}
    to_choices_dict([('Group', ((1, '1st'), 2))]) -> {'Group': {1: '1st', 2: '2'}}
    """
    ...

def flatten_choices_dict(choices):
    """
    Convert a group choices dict into a flat dict of choices.

    flatten_choices_dict({1: '1st', 2: '2nd'}) -> {1: '1st', 2: '2nd'}
    flatten_choices_dict({'Group': {1: '1st', 2: '2nd'}}) -> {1: '1st', 2: '2nd'}
    """
    ...

def iter_options(grouped_choices, cutoff: Optional[Any] = ..., cutoff_text: Optional[Any] = ...):
    """
    Helper function for options and option groups in templates.
    """
    class StartOptionGroup:
        ...
    
    
    class EndOptionGroup:
        ...
    
    
    class Option:
        ...
    
    

def get_error_detail(exc_info):
    """
    Given a Django ValidationError, return a list of ErrorDetail,
    with the `code` populated.
    """
    ...

class CreateOnlyDefault:
    """
    This class may be used to provide default values that are only used
    for create operations, but that do not return any value for update
    operations.
    """
    requires_context = ...
    def __init__(self, default):
        self.default = ...
    
    def __call__(self, serializer_field):
        ...
    
    def __repr__(self):
        ...
    


class CurrentUserDefault:
    requires_context = ...
    def __call__(self, serializer_field):
        ...
    
    def __repr__(self):
        ...
    


class SkipField(Exception):
    ...


REGEX_TYPE = type(re.compile(''))
NOT_READ_ONLY_WRITE_ONLY = 'May not set both `read_only` and `write_only`'
NOT_READ_ONLY_REQUIRED = 'May not set both `read_only` and `required`'
NOT_REQUIRED_DEFAULT = 'May not set both `required` and `default`'
USE_READONLYFIELD = 'Field(read_only=True) should be ReadOnlyField'
MISSING_ERROR_MESSAGE = 'ValidationError raised by `{class_name}`, but error key `{key}` does ' 'not exist in the `error_messages` dictionary.'
class Field:
    _creation_counter = ...
    default_error_messages = ...
    default_validators = ...
    default_empty_html = ...
    initial = ...
    def __init__(self, read_only: bool = ..., write_only: bool = ..., required: Optional[Any] = ..., default=..., initial=..., source: Optional[Any] = ..., label: Optional[Any] = ..., help_text: Optional[Any] = ..., style: Optional[Any] = ..., error_messages: Optional[Any] = ..., validators: Optional[Any] = ..., allow_null: bool = ...):
        self.read_only = ...
        self.write_only = ...
        self.required = ...
        self.default = ...
        self.source = ...
        self.initial = ...
        self.label = ...
        self.help_text = ...
        self.style = ...
        self.allow_null = ...
        self.field_name = ...
        self.parent = ...
        self.error_messages = ...
    
    def bind(self, field_name, parent):
        """
        Initializes the field name and parent for the field instance.
        Called when a field is added to the parent serializer instance.
        """
        self.field_name = ...
        self.parent = ...
    
    @property
    def validators(self):
        ...
    
    @validators.setter
    def validators(self, validators):
        ...
    
    def get_validators(self):
        ...
    
    def get_initial(self):
        """
        Return a value to use when the field is being returned as a primitive
        value, without any object instance.
        """
        ...
    
    def get_value(self, dictionary):
        """
        Given the *incoming* primitive data, return the value for this field
        that should be validated and transformed to a native value.
        """
        ...
    
    def get_attribute(self, instance):
        """
        Given the *outgoing* object instance, return the primitive value
        that should be used for this field.
        """
        ...
    
    def get_default(self):
        """
        Return the default value to use when validating data if no input
        is provided for this field.

        If a default has not been set for this field then this will simply
        raise `SkipField`, indicating that no value should be set in the
        validated data for this field.
        """
        ...
    
    def validate_empty_values(self, data):
        """
        Validate empty values, and either:

        * Raise `ValidationError`, indicating invalid data.
        * Raise `SkipField`, indicating that the field should be ignored.
        * Return (True, data), indicating an empty value that should be
          returned without any further validation being applied.
        * Return (False, data), indicating a non-empty value, that should
          have validation applied as normal.
        """
        ...
    
    def run_validation(self, data=...):
        """
        Validate a simple representation and return the internal value.

        The provided data may be `empty` if no representation was included
        in the input.

        May raise `SkipField` if the field should not be included in the
        validated data.
        """
        ...
    
    def run_validators(self, value):
        """
        Test the given value against all the validators on the field,
        and either raise a `ValidationError` or simply return.
        """
        ...
    
    def to_internal_value(self, data):
        """
        Transform the *incoming* primitive data into a native value.
        """
        ...
    
    def to_representation(self, value):
        """
        Transform the *outgoing* native value into primitive data.
        """
        ...
    
    def fail(self, key, **kwargs):
        """
        A helper method that simply raises a validation error.
        """
        ...
    
    @property
    def root(self):
        """
        Returns the top-level serializer for this field.
        """
        ...
    
    @property
    def context(self):
        """
        Returns the context as passed to the root serializer on initialization.
        """
        ...
    
    def __new__(cls, *args, **kwargs):
        """
        When a field is instantiated, we store the arguments that were used,
        so that we can present a helpful representation of the object.
        """
        ...
    
    def __deepcopy__(self, memo):
        """
        When cloning fields we instantiate using the arguments it was
        originally created with, rather than copying the complete state.
        """
        ...
    
    def __repr__(self):
        """
        Fields are represented using their initial calling arguments.
        This allows us to create descriptive representations for serializer
        instances that show all the declared fields on the serializer.
        """
        ...
    


class BooleanField(Field):
    default_error_messages = ...
    default_empty_html = ...
    initial = ...
    TRUE_VALUES = ...
    FALSE_VALUES = ...
    NULL_VALUES = ...
    def to_internal_value(self, data):
        ...
    
    def to_representation(self, value):
        ...
    


class NullBooleanField(Field):
    default_error_messages = ...
    initial = ...
    TRUE_VALUES = ...
    FALSE_VALUES = ...
    NULL_VALUES = ...
    def __init__(self, **kwargs):
        ...
    
    def to_internal_value(self, data):
        ...
    
    def to_representation(self, value):
        ...
    


class CharField(Field):
    default_error_messages = ...
    initial = ...
    def __init__(self, **kwargs):
        self.allow_blank = ...
        self.trim_whitespace = ...
        self.max_length = ...
        self.min_length = ...
    
    def run_validation(self, data=...):
        ...
    
    def to_internal_value(self, data):
        ...
    
    def to_representation(self, value):
        ...
    


class EmailField(CharField):
    default_error_messages = ...
    def __init__(self, **kwargs):
        ...
    


class RegexField(CharField):
    default_error_messages = ...
    def __init__(self, regex, **kwargs):
        ...
    


class SlugField(CharField):
    default_error_messages = ...
    def __init__(self, allow_unicode: bool = ..., **kwargs):
        self.allow_unicode = ...
    


class URLField(CharField):
    default_error_messages = ...
    def __init__(self, **kwargs):
        ...
    


class UUIDField(Field):
    valid_formats = ...
    default_error_messages = ...
    def __init__(self, **kwargs):
        self.uuid_format = ...
    
    def to_internal_value(self, data):
        ...
    
    def to_representation(self, value):
        ...
    


class IPAddressField(CharField):
    """Support both IPAddressField and GenericIPAddressField"""
    default_error_messages = ...
    def __init__(self, protocol=..., **kwargs):
        self.protocol = ...
        self.unpack_ipv4 = ...
    
    def to_internal_value(self, data):
        ...
    


class IntegerField(Field):
    default_error_messages = ...
    MAX_STRING_LENGTH = ...
    re_decimal = ...
    def __init__(self, **kwargs):
        self.max_value = ...
        self.min_value = ...
    
    def to_internal_value(self, data):
        ...
    
    def to_representation(self, value):
        ...
    


class FloatField(Field):
    default_error_messages = ...
    MAX_STRING_LENGTH = ...
    def __init__(self, **kwargs):
        self.max_value = ...
        self.min_value = ...
    
    def to_internal_value(self, data):
        ...
    
    def to_representation(self, value):
        ...
    


class DecimalField(Field):
    default_error_messages = ...
    MAX_STRING_LENGTH = ...
    def __init__(self, max_digits, decimal_places, coerce_to_string: Optional[Any] = ..., max_value: Optional[Any] = ..., min_value: Optional[Any] = ..., localize: bool = ..., rounding: Optional[Any] = ..., **kwargs):
        self.max_digits = ...
        self.decimal_places = ...
        self.localize = ...
        self.max_value = ...
        self.min_value = ...
        self.rounding = ...
    
    def to_internal_value(self, data):
        """
        Validate that the input is a decimal number and return a Decimal
        instance.
        """
        ...
    
    def validate_precision(self, value):
        """
        Ensure that there are no more than max_digits in the number, and no
        more than decimal_places digits after the decimal point.

        Override this method to disable the precision validation for input
        values or to enhance it in any way you need to.
        """
        ...
    
    def to_representation(self, value):
        ...
    
    def quantize(self, value):
        """
        Quantize the decimal value to the configured precision.
        """
        ...
    


class DateTimeField(Field):
    default_error_messages = ...
    datetime_parser = ...
    def __init__(self, format=..., input_formats: Optional[Any] = ..., default_timezone: Optional[Any] = ..., *args, **kwargs):
        ...
    
    def enforce_timezone(self, value):
        """
        When `self.default_timezone` is `None`, always return naive datetimes.
        When `self.default_timezone` is not `None`, always return aware datetimes.
        """
        ...
    
    def default_timezone(self):
        ...
    
    def to_internal_value(self, value):
        ...
    
    def to_representation(self, value):
        ...
    


class DateField(Field):
    default_error_messages = ...
    datetime_parser = ...
    def __init__(self, format=..., input_formats: Optional[Any] = ..., *args, **kwargs):
        ...
    
    def to_internal_value(self, value):
        ...
    
    def to_representation(self, value):
        ...
    


class TimeField(Field):
    default_error_messages = ...
    datetime_parser = ...
    def __init__(self, format=..., input_formats: Optional[Any] = ..., *args, **kwargs):
        ...
    
    def to_internal_value(self, value):
        ...
    
    def to_representation(self, value):
        ...
    


class DurationField(Field):
    default_error_messages = ...
    def __init__(self, **kwargs):
        self.max_value = ...
        self.min_value = ...
    
    def to_internal_value(self, value):
        ...
    
    def to_representation(self, value):
        ...
    


class ChoiceField(Field):
    default_error_messages = ...
    html_cutoff = ...
    html_cutoff_text = ...
    def __init__(self, choices, **kwargs):
        self.choices = ...
        self.html_cutoff = ...
        self.html_cutoff_text = ...
        self.allow_blank = ...
    
    def to_internal_value(self, data):
        ...
    
    def to_representation(self, value):
        ...
    
    def iter_options(self):
        """
        Helper method for use with templates rendering select widgets.
        """
        ...
    
    def _get_choices(self):
        ...
    
    def _set_choices(self, choices):
        self.grouped_choices = ...
        self.choice_strings_to_values = ...
    
    choices = ...


class MultipleChoiceField(ChoiceField):
    default_error_messages = ...
    default_empty_html = ...
    def __init__(self, *args, **kwargs):
        self.allow_empty = ...
    
    def get_value(self, dictionary):
        ...
    
    def to_internal_value(self, data):
        ...
    
    def to_representation(self, value):
        ...
    


class FilePathField(ChoiceField):
    default_error_messages = ...
    def __init__(self, path, match: Optional[Any] = ..., recursive: bool = ..., allow_files: bool = ..., allow_folders: bool = ..., required: Optional[Any] = ..., **kwargs):
        ...
    


class FileField(Field):
    default_error_messages = ...
    def __init__(self, *args, **kwargs):
        self.max_length = ...
        self.allow_empty_file = ...
    
    def to_internal_value(self, data):
        ...
    
    def to_representation(self, value):
        ...
    


class ImageField(FileField):
    default_error_messages = ...
    def __init__(self, *args, **kwargs):
        ...
    
    def to_internal_value(self, data):
        ...
    


class _UnvalidatedField(Field):
    def __init__(self, *args, **kwargs):
        self.allow_blank = ...
        self.allow_null = ...
    
    def to_internal_value(self, data):
        ...
    
    def to_representation(self, value):
        ...
    


class ListField(Field):
    child = ...
    initial = ...
    default_error_messages = ...
    def __init__(self, *args, **kwargs):
        self.child = ...
        self.allow_empty = ...
        self.max_length = ...
        self.min_length = ...
    
    def get_value(self, dictionary):
        ...
    
    def to_internal_value(self, data):
        """
        List of dicts of native values <- List of dicts of primitive datatypes.
        """
        ...
    
    def to_representation(self, data):
        """
        List of object instances -> List of dicts of primitive datatypes.
        """
        ...
    
    def run_child_validation(self, data):
        ...
    


class DictField(Field):
    child = ...
    initial = ...
    default_error_messages = ...
    def __init__(self, *args, **kwargs):
        self.child = ...
        self.allow_empty = ...
    
    def get_value(self, dictionary):
        ...
    
    def to_internal_value(self, data):
        """
        Dicts of native values <- Dicts of primitive datatypes.
        """
        ...
    
    def to_representation(self, value):
        ...
    
    def run_child_validation(self, data):
        ...
    


class HStoreField(DictField):
    child = ...
    def __init__(self, *args, **kwargs):
        ...
    


class JSONField(Field):
    default_error_messages = ...
    def __init__(self, *args, **kwargs):
        self.binary = ...
        self.encoder = ...
    
    def get_value(self, dictionary):
        ...
    
    def to_internal_value(self, data):
        ...
    
    def to_representation(self, value):
        ...
    


class ReadOnlyField(Field):
    """
    A read-only field that simply returns the field value.

    If the field is a method with no parameters, the method will be called
    and its return value used as the representation.

    For example, the following would call `get_expiry_date()` on the object:

    class ExampleSerializer(Serializer):
        expiry_date = ReadOnlyField(source='get_expiry_date')
    """
    def __init__(self, **kwargs):
        ...
    
    def to_representation(self, value):
        ...
    


class HiddenField(Field):
    """
    A hidden field does not take input from the user, or present any output,
    but it does populate a field in `validated_data`, based on its default
    value. This is particularly useful when we have a `unique_for_date`
    constraint on a pair of fields, as we need some way to include the date in
    the validated data.
    """
    def __init__(self, **kwargs):
        ...
    
    def get_value(self, dictionary):
        ...
    
    def to_internal_value(self, data):
        ...
    


class SerializerMethodField(Field):
    """
    A read-only field that get its representation from calling a method on the
    parent serializer class. The method called will be of the form
    "get_{field_name}", and should take a single argument, which is the
    object being serialized.

    For example:

    class ExampleSerializer(self):
        extra_info = SerializerMethodField()

        def get_extra_info(self, obj):
            return ...  # Calculate some data to return.
    """
    def __init__(self, method_name: Optional[Any] = ..., **kwargs):
        self.method_name = ...
    
    def bind(self, field_name, parent):
        ...
    
    def to_representation(self, value):
        ...
    


class ModelField(Field):
    """
    A generic field that can be used against an arbitrary model field.

    This is used by `ModelSerializer` when dealing with custom model fields,
    that do not have a serializer field to be mapped to.
    """
    default_error_messages = ...
    def __init__(self, model_field, **kwargs):
        self.model_field = ...
        self.max_length = ...
    
    def to_internal_value(self, data):
        ...
    
    def get_attribute(self, obj):
        ...
    
    def to_representation(self, obj):
        ...
    


