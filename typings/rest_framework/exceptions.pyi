"""
This type stub file was generated by pyright.
"""

from typing import Any, Optional

"""
Handled exceptions raised by REST framework.

In addition Django's built in 403 and 404 exceptions are handled.
(`django.http.Http404` and `django.core.exceptions.PermissionDenied`)
"""
def _get_error_details(data, default_code: Optional[Any] = ...):
    """
    Descend into a nested data structure, forcing any
    lazy translation strings or strings into `ErrorDetail`.
    """
    ...

def _get_codes(detail):
    ...

def _get_full_details(detail):
    ...

class ErrorDetail(str):
    """
    A string-like object that can additionally have a code.
    """
    code = ...
    def __new__(cls, string, code: Optional[Any] = ...):
        self.code = ...
    
    def __eq__(self, other):
        ...
    
    def __ne__(self, other):
        ...
    
    def __repr__(self):
        ...
    
    def __hash__(self):
        ...
    


class APIException(Exception):
    """
    Base class for REST framework exceptions.
    Subclasses should provide `.status_code` and `.default_detail` properties.
    """
    status_code = ...
    default_detail = ...
    default_code = ...
    def __init__(self, detail: Optional[Any] = ..., code: Optional[Any] = ...):
        self.detail = ...
    
    def __str__(self):
        ...
    
    def get_codes(self):
        """
        Return only the code part of the error details.

        Eg. {"name": ["required"]}
        """
        ...
    
    def get_full_details(self):
        """
        Return both the message & code parts of the error details.

        Eg. {"name": [{"message": "This field is required.", "code": "required"}]}
        """
        ...
    


class ValidationError(APIException):
    status_code = ...
    default_detail = ...
    default_code = ...
    def __init__(self, detail: Optional[Any] = ..., code: Optional[Any] = ...):
        self.detail = ...
    


class ParseError(APIException):
    status_code = ...
    default_detail = ...
    default_code = ...


class AuthenticationFailed(APIException):
    status_code = ...
    default_detail = ...
    default_code = ...


class NotAuthenticated(APIException):
    status_code = ...
    default_detail = ...
    default_code = ...


class PermissionDenied(APIException):
    status_code = ...
    default_detail = ...
    default_code = ...


class NotFound(APIException):
    status_code = ...
    default_detail = ...
    default_code = ...


class MethodNotAllowed(APIException):
    status_code = ...
    default_detail = ...
    default_code = ...
    def __init__(self, method, detail: Optional[Any] = ..., code: Optional[Any] = ...):
        ...
    


class NotAcceptable(APIException):
    status_code = ...
    default_detail = ...
    default_code = ...
    def __init__(self, detail: Optional[Any] = ..., code: Optional[Any] = ..., available_renderers: Optional[Any] = ...):
        self.available_renderers = ...
    


class UnsupportedMediaType(APIException):
    status_code = ...
    default_detail = ...
    default_code = ...
    def __init__(self, media_type, detail: Optional[Any] = ..., code: Optional[Any] = ...):
        ...
    


class Throttled(APIException):
    status_code = ...
    default_detail = ...
    extra_detail_singular = ...
    extra_detail_plural = ...
    default_code = ...
    def __init__(self, wait: Optional[Any] = ..., detail: Optional[Any] = ..., code: Optional[Any] = ...):
        self.wait = ...
    


def server_error(request, *args, **kwargs):
    """
    Generic 500 error handler.
    """
    ...

def bad_request(request, exception, *args, **kwargs):
    """
    Generic 400 error handler.
    """
    ...

