"""
This type stub file was generated by pyright.
"""

from typing import Any, Optional

"""
Renderers are used to serialize a response into specific media types.

They give us a generic way of being able to handle various media types
on the response, such as JSON encoded data or HTML output.

REST framework also provides an HTML renderer that renders the browsable API.
"""
def zero_as_none(value):
    ...

class BaseRenderer:
    """
    All renderers should extend this class, setting the `media_type`
    and `format` attributes, and override the `.render()` method.
    """
    media_type = ...
    format = ...
    charset = ...
    render_style = ...
    def render(self, data, accepted_media_type: Optional[Any] = ..., renderer_context: Optional[Any] = ...):
        ...
    


class JSONRenderer(BaseRenderer):
    """
    Renderer which serializes to JSON.
    """
    media_type = ...
    format = ...
    encoder_class = ...
    ensure_ascii = ...
    compact = ...
    strict = ...
    charset = ...
    def get_indent(self, accepted_media_type, renderer_context):
        ...
    
    def render(self, data, accepted_media_type: Optional[Any] = ..., renderer_context: Optional[Any] = ...):
        """
        Render `data` into JSON, returning a bytestring.
        """
        ...
    


class TemplateHTMLRenderer(BaseRenderer):
    """
    An HTML renderer for use with templates.

    The data supplied to the Response object should be a dictionary that will
    be used as context for the template.

    The template name is determined by (in order of preference):

    1. An explicit `.template_name` attribute set on the response.
    2. An explicit `.template_name` attribute set on this class.
    3. The return result of calling `view.get_template_names()`.

    For example:
        data = {'users': User.objects.all()}
        return Response(data, template_name='users.html')

    For pre-rendered HTML, see StaticHTMLRenderer.
    """
    media_type = ...
    format = ...
    template_name = ...
    exception_template_names = ...
    charset = ...
    def render(self, data, accepted_media_type: Optional[Any] = ..., renderer_context: Optional[Any] = ...):
        """
        Renders data to HTML, using Django's standard template rendering.

        The template name is determined by (in order of preference):

        1. An explicit .template_name set on the response.
        2. An explicit .template_name set on this class.
        3. The return result of calling view.get_template_names().
        """
        ...
    
    def resolve_template(self, template_names):
        ...
    
    def get_template_context(self, data, renderer_context):
        ...
    
    def get_template_names(self, response, view):
        ...
    
    def get_exception_template(self, response):
        ...
    


class StaticHTMLRenderer(TemplateHTMLRenderer):
    """
    An HTML renderer class that simply returns pre-rendered HTML.

    The data supplied to the Response object should be a string representing
    the pre-rendered HTML content.

    For example:
        data = '<html><body>example</body></html>'
        return Response(data)

    For template rendered HTML, see TemplateHTMLRenderer.
    """
    media_type = ...
    format = ...
    charset = ...
    def render(self, data, accepted_media_type: Optional[Any] = ..., renderer_context: Optional[Any] = ...):
        ...
    


class HTMLFormRenderer(BaseRenderer):
    """
    Renderers serializer data into an HTML form.

    If the serializer was instantiated without an object then this will
    return an HTML form not bound to any object,
    otherwise it will return an HTML form with the appropriate initial data
    populated from the object.

    Note that rendering of field and form errors is not currently supported.
    """
    media_type = ...
    format = ...
    charset = ...
    template_pack = ...
    base_template = ...
    default_style = ...
    def render_field(self, field, parent_style):
        ...
    
    def render(self, data, accepted_media_type: Optional[Any] = ..., renderer_context: Optional[Any] = ...):
        """
        Render serializer data and return an HTML form, as a string.
        """
        ...
    


class BrowsableAPIRenderer(BaseRenderer):
    """
    HTML renderer used to self-document the API.
    """
    media_type = ...
    format = ...
    template = ...
    filter_template = ...
    code_style = ...
    charset = ...
    form_renderer_class = ...
    def get_default_renderer(self, view):
        """
        Return an instance of the first valid renderer.
        (Don't use another documenting renderer.)
        """
        ...
    
    def get_content(self, renderer, data, accepted_media_type, renderer_context):
        """
        Get the content as if it had been rendered by the default
        non-documenting renderer.
        """
        ...
    
    def show_form_for_method(self, view, method, request, obj):
        """
        Returns True if a form should be shown for this method.
        """
        ...
    
    def _get_serializer(self, serializer_class, view_instance, request, *args, **kwargs):
        ...
    
    def get_rendered_html_form(self, data, view, method, request):
        """
        Return a string representing a rendered HTML form, possibly bound to
        either the input or output data.

        In the absence of the View having an associated form then return None.
        """
        ...
    
    def render_form_for_serializer(self, serializer):
        ...
    
    def get_raw_data_form(self, data, view, method, request):
        """
        Returns a form that allows for arbitrary content types to be tunneled
        via standard HTML forms.
        (Which are typically application/x-www-form-urlencoded)
        """
        ...
    
    def get_name(self, view):
        ...
    
    def get_description(self, view, status_code):
        ...
    
    def get_breadcrumbs(self, request):
        ...
    
    def get_extra_actions(self, view, status_code):
        ...
    
    def get_filter_form(self, data, view, request):
        ...
    
    def get_context(self, data, accepted_media_type, renderer_context):
        """
        Returns the context used to render.
        """
        ...
    
    def render(self, data, accepted_media_type: Optional[Any] = ..., renderer_context: Optional[Any] = ...):
        """
        Render the HTML for the browsable API representation.
        """
        self.accepted_media_type = ...
        self.renderer_context = ...
    


class AdminRenderer(BrowsableAPIRenderer):
    template = ...
    format = ...
    def render(self, data, accepted_media_type: Optional[Any] = ..., renderer_context: Optional[Any] = ...):
        self.accepted_media_type = ...
        self.renderer_context = ...
    
    def get_context(self, data, accepted_media_type, renderer_context):
        """
        Render the HTML for the browsable API representation.
        """
        ...
    
    def get_result_url(self, result, view):
        """
        Attempt to reverse the result's detail view URL.

        This only works with views that are generic-like (has `.lookup_field`)
        and viewset-like (has `.basename` / `.reverse_action()`).
        """
        ...
    


class DocumentationRenderer(BaseRenderer):
    media_type = ...
    format = ...
    charset = ...
    template = ...
    error_template = ...
    code_style = ...
    languages = ...
    def get_context(self, data, request):
        ...
    
    def render(self, data, accepted_media_type: Optional[Any] = ..., renderer_context: Optional[Any] = ...):
        ...
    


class SchemaJSRenderer(BaseRenderer):
    media_type = ...
    format = ...
    charset = ...
    template = ...
    def render(self, data, accepted_media_type: Optional[Any] = ..., renderer_context: Optional[Any] = ...):
        ...
    


class MultiPartRenderer(BaseRenderer):
    media_type = ...
    format = ...
    charset = ...
    BOUNDARY = ...
    def render(self, data, accepted_media_type: Optional[Any] = ..., renderer_context: Optional[Any] = ...):
        ...
    


class CoreJSONRenderer(BaseRenderer):
    media_type = ...
    charset = ...
    format = ...
    def __init__(self):
        ...
    
    def render(self, data, media_type: Optional[Any] = ..., renderer_context: Optional[Any] = ...):
        ...
    


class _BaseOpenAPIRenderer:
    def get_schema(self, instance):
        ...
    
    def get_parameters(self, link):
        ...
    
    def get_operation(self, link, name, tag):
        ...
    
    def get_paths(self, document):
        ...
    
    def get_structure(self, data):
        ...
    


class CoreAPIOpenAPIRenderer(_BaseOpenAPIRenderer):
    media_type = ...
    charset = ...
    format = ...
    def __init__(self):
        ...
    
    def render(self, data, media_type: Optional[Any] = ..., renderer_context: Optional[Any] = ...):
        ...
    


class CoreAPIJSONOpenAPIRenderer(_BaseOpenAPIRenderer):
    media_type = ...
    charset = ...
    format = ...
    def __init__(self):
        ...
    
    def render(self, data, media_type: Optional[Any] = ..., renderer_context: Optional[Any] = ...):
        ...
    


class OpenAPIRenderer(BaseRenderer):
    media_type = ...
    charset = ...
    format = ...
    def __init__(self):
        ...
    
    def render(self, data, media_type: Optional[Any] = ..., renderer_context: Optional[Any] = ...):
        ...
    


class JSONOpenAPIRenderer(BaseRenderer):
    media_type = ...
    charset = ...
    format = ...
    def render(self, data, media_type: Optional[Any] = ..., renderer_context: Optional[Any] = ...):
        ...
    


